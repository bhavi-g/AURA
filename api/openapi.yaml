
openapi: 3.0.3
info:
  title: AURA Audit API
  version: "1.0.0"
servers:
  - url: http://localhost:8000
paths:
  /audit:
    post:
      summary: Submit contract for audit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuditRequest"
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditAccepted"
  /report/{job_id}:
    get:
      summary: Fetch audit report
      parameters:
        - in: path
          name: job_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditReport"
components:
  schemas:
    AuditRequest:
      type: object
      required: [source]
      properties:
        source:
          type: object
          description: Contract source or address
          oneOf:
            - required: [repo]
              properties:
                repo: { type: string, description: "Git URL or path" }
            - required: [address, chain]
              properties:
                address: { type: string }
                chain: { type: string, enum: [ethereum, arbitrum, optimism, polygon] }
        depth: { type: string, enum: [triage, deep], default: triage }
    AuditAccepted:
      type: object
      properties:
        job_id: { type: string }
        eta_seconds: { type: integer }
    AuditReport:
      type: object
      required: [summary, findings, artifacts, metrics, version]
      properties:
        version: { type: string }
        summary:
          type: object
          properties:
            risk_score: { type: number, format: float }
            expected_loss: { type: number, format: float }
            risk_band: { type: string, enum: [pass, warning, critical, manual_review] }
            confidence: { type: number }
        findings:
          type: array
          items: { $ref: "#/components/schemas/Finding" }
        artifacts:
          type: array
          items: { $ref: "#/components/schemas/Artifact" }
        metrics:
          $ref: "#/components/schemas/Metrics"
    Finding:
      type: object
      required: [id, swc_id, severity, probability, location, evidence]
      properties:
        id: { type: string }
        swc_id: { type: string }
        name: { type: string }
        severity: { type: string, enum: [LOW, MEDIUM, HIGH, CRITICAL] }
        probability: { type: number }
        calibrated_probability: { type: number }
        expected_loss: { type: number }
        location:
          type: object
          properties:
            file: { type: string }
            line: { type: integer }
            column: { type: integer }
        evidence:
          type: object
          properties:
            trace: { type: array, items: { type: string } }
            constraints: { type: array, items: { type: string } }
            snippet: { type: string }
        recommendation: { type: string }
        uncertainty:
          type: object
          properties:
            epistemic: { type: number }
            aleatoric: { type: number }
            band:
              type: object
              properties:
                lower: { type: number }
                upper: { type: number }
    Artifact:
      type: object
      properties:
        type: { type: string, enum: [poc, trace, coverage, calibration] }
        uri: { type: string }
        sha256: { type: string }
    Metrics:
      type: object
      properties:
        coverage: { type: number }
        paths_explored: { type: integer }
        time_to_signal_sec: { type: number }
        runtime_sec: { type: number }
